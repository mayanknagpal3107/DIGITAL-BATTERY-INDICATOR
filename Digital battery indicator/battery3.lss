
battery3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000038a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  0000038a  0000041e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000125  0080008a  0080008a  00000448  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000b0  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000556  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000289  00000000  00000000  00000a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000417  00000000  00000000  00000cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00001110  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000204  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000170  00000000  00000000  000013d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00001544  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_11>
  30:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e8       	ldi	r30, 0x8A	; 138
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 38       	cpi	r26, 0x8A	; 138
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	aa e8       	ldi	r26, 0x8A	; 138
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 3a       	cpi	r26, 0xAF	; 175
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f7 00 	call	0x1ee	; 0x1ee <main>
  8a:	0c 94 c3 01 	jmp	0x386	; 0x386 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_11>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
  a2:	ef 93       	push	r30
  a4:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
  a6:	9b b1       	in	r25, 0x0b	; 11
    data = UART0_DATA;
  a8:	2c b1       	in	r18, 0x0c	; 12
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
  aa:	e0 91 ac 01 	lds	r30, 0x01AC
  ae:	ef 5f       	subi	r30, 0xFF	; 255
    
    if ( tmphead == UART_RxTail ) {
  b0:	80 91 ad 01 	lds	r24, 0x01AD
  b4:	e8 17       	cp	r30, r24
  b6:	11 f4       	brne	.+4      	; 0xbc <__vector_11+0x2a>
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	08 c0       	rjmp	.+16     	; 0xcc <__vector_11+0x3a>
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
  bc:	89 2f       	mov	r24, r25
  be:	88 71       	andi	r24, 0x18	; 24
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
  c0:	e0 93 ac 01 	sts	0x01AC, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	e6 55       	subi	r30, 0x56	; 86
  c8:	ff 4f       	sbci	r31, 0xFF	; 255
  ca:	20 83       	st	Z, r18
    }
    UART_LastRxError = lastRxError;   
  cc:	80 93 ae 01 	sts	0x01AE, r24
}
  d0:	ff 91       	pop	r31
  d2:	ef 91       	pop	r30
  d4:	9f 91       	pop	r25
  d6:	8f 91       	pop	r24
  d8:	2f 91       	pop	r18
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <__vector_12>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
  f2:	ef 93       	push	r30
  f4:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
  f6:	90 91 aa 01 	lds	r25, 0x01AA
  fa:	80 91 ab 01 	lds	r24, 0x01AB
  fe:	98 17       	cp	r25, r24
 100:	61 f0       	breq	.+24     	; 0x11a <__vector_12+0x36>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 102:	e0 91 ab 01 	lds	r30, 0x01AB
 106:	ef 5f       	subi	r30, 0xFF	; 255
 108:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 10a:	e0 93 ab 01 	sts	0x01AB, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	e6 57       	subi	r30, 0x76	; 118
 112:	ff 4f       	sbci	r31, 0xFF	; 255
 114:	80 81       	ld	r24, Z
 116:	8c b9       	out	0x0c, r24	; 12
 118:	01 c0       	rjmp	.+2      	; 0x11c <__vector_12+0x38>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 11a:	55 98       	cbi	0x0a, 5	; 10
    }
}
 11c:	ff 91       	pop	r31
 11e:	ef 91       	pop	r30
 120:	9f 91       	pop	r25
 122:	8f 91       	pop	r24
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti

0000012e <clearBuffer>:


//Try to clear the already buffered data
void clearBuffer(){
	
	UART_RxHead = 0;
 12e:	10 92 ac 01 	sts	0x01AC, r1
    UART_RxTail = 0;
 132:	10 92 ad 01 	sts	0x01AD, r1
}
 136:	08 95       	ret

00000138 <uart_init>:
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
 138:	9c 01       	movw	r18, r24
    UART_TxHead = 0;
 13a:	10 92 aa 01 	sts	0x01AA, r1
    UART_TxTail = 0;
 13e:	10 92 ab 01 	sts	0x01AB, r1
    UART_RxHead = 0;
 142:	10 92 ac 01 	sts	0x01AC, r1
    UART_RxTail = 0;
 146:	10 92 ad 01 	sts	0x01AD, r1
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
 14a:	97 ff       	sbrs	r25, 7
 14c:	03 c0       	rjmp	.+6      	; 0x154 <uart_init+0x1c>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed 
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	8b b9       	out	0x0b, r24	; 11
    	 baudrate &= ~0x8000;
 152:	3f 77       	andi	r19, 0x7F	; 127
    }
    UBRRH = (unsigned char)(baudrate>>8);
 154:	30 bd       	out	0x20, r19	; 32
    UBRRL = (unsigned char) baudrate;
 156:	29 b9       	out	0x09, r18	; 9
   
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
 158:	88 e9       	ldi	r24, 0x98	; 152
 15a:	8a b9       	out	0x0a, r24	; 10
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
 15c:	86 e8       	ldi	r24, 0x86	; 134
 15e:	80 bd       	out	0x20, r24	; 32
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
 160:	08 95       	ret

00000162 <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
 162:	90 91 ac 01 	lds	r25, 0x01AC
 166:	80 91 ad 01 	lds	r24, 0x01AD
 16a:	98 17       	cp	r25, r24
 16c:	19 f4       	brne	.+6      	; 0x174 <uart_getc+0x12>
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	31 e0       	ldi	r19, 0x01	; 1
 172:	11 c0       	rjmp	.+34     	; 0x196 <uart_getc+0x34>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 174:	e0 91 ad 01 	lds	r30, 0x01AD
 178:	ef 5f       	subi	r30, 0xFF	; 255
    UART_RxTail = tmptail; 
 17a:	e0 93 ad 01 	sts	0x01AD, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	e6 55       	subi	r30, 0x56	; 86
 182:	ff 4f       	sbci	r31, 0xFF	; 255
 184:	30 81       	ld	r19, Z
    
    return (UART_LastRxError << 8) + data;
 186:	20 91 ae 01 	lds	r18, 0x01AE
 18a:	92 2f       	mov	r25, r18
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	ac 01       	movw	r20, r24
 190:	43 0f       	add	r20, r19
 192:	51 1d       	adc	r21, r1
 194:	9a 01       	movw	r18, r20

}/* uart_getc */
 196:	c9 01       	movw	r24, r18
 198:	08 95       	ret

0000019a <transmitByte>:


void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
 19a:	5d 9b       	sbis	0x0b, 5	; 11
 19c:	fe cf       	rjmp	.-4      	; 0x19a <transmitByte>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
 19e:	8c b9       	out	0x0c, r24	; 12
}
 1a0:	08 95       	ret

000001a2 <uart_putc>:
}/* uart_getc */


void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
 1a2:	5d 9b       	sbis	0x0b, 5	; 11
 1a4:	fe cf       	rjmp	.-4      	; 0x1a2 <uart_putc>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
 1a6:	8c b9       	out	0x0c, r24	; 12
    /* enable UDRE interrupt */
    /*UART0_CONTROL    |= _BV(UART0_UDRIE);*/
	
	transmitByte(data);

}/* uart_putc */
 1a8:	08 95       	ret

000001aa <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 1aa:	fc 01       	movw	r30, r24
 1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <uart_puts+0xc>
}/* uart_getc */


void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
 1ae:	5d 9b       	sbis	0x0b, 5	; 11
 1b0:	fe cf       	rjmp	.-4      	; 0x1ae <uart_puts+0x4>
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
      uart_putc(*s++);
 1b2:	31 96       	adiw	r30, 0x01	; 1

void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
 1b4:	8c b9       	out	0x0c, r24	; 12
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 1b6:	80 81       	ld	r24, Z
 1b8:	88 23       	and	r24, r24
 1ba:	c9 f7       	brne	.-14     	; 0x1ae <uart_puts+0x4>
      uart_putc(*s++);

}/* uart_puts */
 1bc:	08 95       	ret

000001be <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 1be:	03 c0       	rjmp	.+6      	; 0x1c6 <uart_puts_p+0x8>
}/* uart_getc */


void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
 1c0:	5d 9b       	sbis	0x0b, 5	; 11
 1c2:	fe cf       	rjmp	.-4      	; 0x1c0 <uart_puts_p+0x2>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
 1c4:	2c b9       	out	0x0c, r18	; 12
 1c6:	fc 01       	movw	r30, r24
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 1c8:	01 96       	adiw	r24, 0x01	; 1
 1ca:	24 91       	lpm	r18, Z+
 1cc:	22 23       	and	r18, r18
 1ce:	c1 f7       	brne	.-16     	; 0x1c0 <uart_puts_p+0x2>
      uart_putc(c);

}/* uart_puts_p */
 1d0:	08 95       	ret

000001d2 <readADC>:
int readADC(int channel){
	
	int x;
	long val=0;
	
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) | (1 << ADIF); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz
 1d2:	96 b1       	in	r25, 0x06	; 6
 1d4:	97 61       	ori	r25, 0x17	; 23
 1d6:	96 b9       	out	0x06, r25	; 6

	ADMUX = channel;
 1d8:	87 b9       	out	0x07, r24	; 7
	
	ADMUX |= (1 << REFS0); // Set ADC reference to AVCC
 1da:	3e 9a       	sbi	0x07, 6	; 7
	ADMUX |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading
 1dc:	3d 9a       	sbi	0x07, 5	; 7

	
	//ADCSRA |= (1 << ADFR);  // Set ADC to Free-Running 4
	ADCSRA |= (1 << ADEN);  // Enable ADC
 1de:	37 9a       	sbi	0x06, 7	; 6
	
	ADCSRA |= (1 << ADSC);  // Start A2D Conversions 
 1e0:	36 9a       	sbi	0x06, 6	; 6
	
	
	 //Wait for conversion to complete
   while(!(ADCSRA & (1<<ADIF)));
 1e2:	34 9b       	sbis	0x06, 4	; 6
 1e4:	fe cf       	rjmp	.-4      	; 0x1e2 <readADC+0x10>

   //Clear ADIF by writing one to it
   ADCSRA|=(1<<ADIF);	
 1e6:	34 9a       	sbi	0x06, 4	; 6
	
	return ADCH;
 1e8:	85 b1       	in	r24, 0x05	; 5
}
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	08 95       	ret

000001ee <main>:


void main()
{
 1ee:	af 92       	push	r10
 1f0:	bf 92       	push	r11
 1f2:	cf 92       	push	r12
 1f4:	df 92       	push	r13
 1f6:	ef 92       	push	r14
 1f8:	ff 92       	push	r15
 1fa:	0f 93       	push	r16
 1fc:	1f 93       	push	r17
 1fe:	df 93       	push	r29
 200:	cf 93       	push	r28
 202:	cd b7       	in	r28, 0x3d	; 61
 204:	de b7       	in	r29, 0x3e	; 62
 206:	2a 97       	sbiw	r28, 0x0a	; 10
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	f8 94       	cli
 20c:	de bf       	out	0x3e, r29	; 62
 20e:	0f be       	out	0x3f, r0	; 63
 210:	cd bf       	out	0x3d, r28	; 61
   
DDRC=0x0f;
 212:	8f e0       	ldi	r24, 0x0F	; 15
 214:	84 bb       	out	0x14, r24	; 20
	uart_init(UART_BAUD_SELECT(9600,F_CPU));
 216:	87 e6       	ldi	r24, 0x67	; 103
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 9c 00 	call	0x138	; 0x138 <uart_init>
	sei();
 21e:	78 94       	sei
	uart_puts("START");//uart_putc('f');
 220:	80 e6       	ldi	r24, 0x60	; 96
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>
	uart_puts("\n\r");
 228:	86 e6       	ldi	r24, 0x66	; 102
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>
 230:	80 e3       	ldi	r24, 0x30	; 48
 232:	95 e7       	ldi	r25, 0x75	; 117
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 234:	20 e9       	ldi	r18, 0x90	; 144
 236:	31 e0       	ldi	r19, 0x01	; 1
 238:	f9 01       	movw	r30, r18
 23a:	31 97       	sbiw	r30, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <main+0x4c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 23e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 240:	d9 f7       	brne	.-10     	; 0x238 <main+0x4a>
	
	_delay_ms(3000);
	int a,s,d,f,g,h;
	
	char str[10],str1[10],str2[2],str3[2],str4[2],str5[2];
	sbi(DDRA,0);
 242:	d0 9a       	sbi	0x1a, 0	; 26
	cbi(PORTA,0);
 244:	d8 98       	cbi	0x1b, 0	; 27

	//PORTC=0x0f;
	a= readADC(7);


	itoa(a,str,10);
 246:	7e 01       	movw	r14, r28
 248:	08 94       	sec
 24a:	e1 1c       	adc	r14, r1
 24c:	f1 1c       	adc	r15, r1
	uart_puts(str);

	uart_puts("\t");	
	
	s= (a*100)/256;
	itoa(s,str,10);
 24e:	94 e6       	ldi	r25, 0x64	; 100
 250:	a9 2e       	mov	r10, r25
 252:	b1 2c       	mov	r11, r1
 254:	80 e9       	ldi	r24, 0x90	; 144
 256:	c8 2e       	mov	r12, r24
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	d8 2e       	mov	r13, r24
while(1)
	
{

	//PORTC=0x0f;
	a= readADC(7);
 25c:	87 e0       	ldi	r24, 0x07	; 7
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <readADC>
 264:	8c 01       	movw	r16, r24


	itoa(a,str,10);
 266:	b7 01       	movw	r22, r14
 268:	4a e0       	ldi	r20, 0x0A	; 10
 26a:	50 e0       	ldi	r21, 0x00	; 0
 26c:	0e 94 92 01 	call	0x324	; 0x324 <itoa>
	
	//uart_puts("mesure the ADC value and battery level");
	uart_puts("ADC value = ");
 270:	89 e6       	ldi	r24, 0x69	; 105
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>
	uart_puts(str);
 278:	c7 01       	movw	r24, r14
 27a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>

	uart_puts("\t");	
 27e:	86 e7       	ldi	r24, 0x76	; 118
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>
	
	s= (a*100)/256;
	itoa(s,str,10);
 286:	0a 9d       	mul	r16, r10
 288:	c0 01       	movw	r24, r0
 28a:	0b 9d       	mul	r16, r11
 28c:	90 0d       	add	r25, r0
 28e:	1a 9d       	mul	r17, r10
 290:	90 0d       	add	r25, r0
 292:	11 24       	eor	r1, r1
 294:	60 e0       	ldi	r22, 0x00	; 0
 296:	71 e0       	ldi	r23, 0x01	; 1
 298:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <__divmodhi4>
 29c:	cb 01       	movw	r24, r22
 29e:	b7 01       	movw	r22, r14
 2a0:	4a e0       	ldi	r20, 0x0A	; 10
 2a2:	50 e0       	ldi	r21, 0x00	; 0
 2a4:	0e 94 92 01 	call	0x324	; 0x324 <itoa>
	uart_puts("Battery level = ");
 2a8:	88 e7       	ldi	r24, 0x78	; 120
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>
	uart_puts(str);
 2b0:	c7 01       	movw	r24, r14
 2b2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>
	
	uart_puts("\n\r");
 2b6:	86 e6       	ldi	r24, 0x66	; 102
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>
	uart_puts("\n\r");
 2be:	86 e6       	ldi	r24, 0x66	; 102
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_puts>
 2c6:	80 e1       	ldi	r24, 0x10	; 16
 2c8:	97 e2       	ldi	r25, 0x27	; 39
 2ca:	f6 01       	movw	r30, r12
 2cc:	31 97       	sbiw	r30, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <main+0xde>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2d0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2d2:	d9 f7       	brne	.-10     	; 0x2ca <main+0xdc>
 2d4:	c3 cf       	rjmp	.-122    	; 0x25c <main+0x6e>

000002d6 <__divmodhi4>:
 2d6:	97 fb       	bst	r25, 7
 2d8:	09 2e       	mov	r0, r25
 2da:	07 26       	eor	r0, r23
 2dc:	0a d0       	rcall	.+20     	; 0x2f2 <__divmodhi4_neg1>
 2de:	77 fd       	sbrc	r23, 7
 2e0:	04 d0       	rcall	.+8      	; 0x2ea <__divmodhi4_neg2>
 2e2:	0c d0       	rcall	.+24     	; 0x2fc <__udivmodhi4>
 2e4:	06 d0       	rcall	.+12     	; 0x2f2 <__divmodhi4_neg1>
 2e6:	00 20       	and	r0, r0
 2e8:	1a f4       	brpl	.+6      	; 0x2f0 <__divmodhi4_exit>

000002ea <__divmodhi4_neg2>:
 2ea:	70 95       	com	r23
 2ec:	61 95       	neg	r22
 2ee:	7f 4f       	sbci	r23, 0xFF	; 255

000002f0 <__divmodhi4_exit>:
 2f0:	08 95       	ret

000002f2 <__divmodhi4_neg1>:
 2f2:	f6 f7       	brtc	.-4      	; 0x2f0 <__divmodhi4_exit>
 2f4:	90 95       	com	r25
 2f6:	81 95       	neg	r24
 2f8:	9f 4f       	sbci	r25, 0xFF	; 255
 2fa:	08 95       	ret

000002fc <__udivmodhi4>:
 2fc:	aa 1b       	sub	r26, r26
 2fe:	bb 1b       	sub	r27, r27
 300:	51 e1       	ldi	r21, 0x11	; 17
 302:	07 c0       	rjmp	.+14     	; 0x312 <__udivmodhi4_ep>

00000304 <__udivmodhi4_loop>:
 304:	aa 1f       	adc	r26, r26
 306:	bb 1f       	adc	r27, r27
 308:	a6 17       	cp	r26, r22
 30a:	b7 07       	cpc	r27, r23
 30c:	10 f0       	brcs	.+4      	; 0x312 <__udivmodhi4_ep>
 30e:	a6 1b       	sub	r26, r22
 310:	b7 0b       	sbc	r27, r23

00000312 <__udivmodhi4_ep>:
 312:	88 1f       	adc	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	5a 95       	dec	r21
 318:	a9 f7       	brne	.-22     	; 0x304 <__udivmodhi4_loop>
 31a:	80 95       	com	r24
 31c:	90 95       	com	r25
 31e:	bc 01       	movw	r22, r24
 320:	cd 01       	movw	r24, r26
 322:	08 95       	ret

00000324 <itoa>:
 324:	fb 01       	movw	r30, r22
 326:	9f 01       	movw	r18, r30
 328:	e8 94       	clt
 32a:	42 30       	cpi	r20, 0x02	; 2
 32c:	c4 f0       	brlt	.+48     	; 0x35e <itoa+0x3a>
 32e:	45 32       	cpi	r20, 0x25	; 37
 330:	b4 f4       	brge	.+44     	; 0x35e <itoa+0x3a>
 332:	4a 30       	cpi	r20, 0x0A	; 10
 334:	29 f4       	brne	.+10     	; 0x340 <itoa+0x1c>
 336:	97 fb       	bst	r25, 7
 338:	1e f4       	brtc	.+6      	; 0x340 <itoa+0x1c>
 33a:	90 95       	com	r25
 33c:	81 95       	neg	r24
 33e:	9f 4f       	sbci	r25, 0xFF	; 255
 340:	64 2f       	mov	r22, r20
 342:	77 27       	eor	r23, r23
 344:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__udivmodhi4>
 348:	80 5d       	subi	r24, 0xD0	; 208
 34a:	8a 33       	cpi	r24, 0x3A	; 58
 34c:	0c f0       	brlt	.+2      	; 0x350 <itoa+0x2c>
 34e:	89 5d       	subi	r24, 0xD9	; 217
 350:	81 93       	st	Z+, r24
 352:	cb 01       	movw	r24, r22
 354:	00 97       	sbiw	r24, 0x00	; 0
 356:	a1 f7       	brne	.-24     	; 0x340 <itoa+0x1c>
 358:	16 f4       	brtc	.+4      	; 0x35e <itoa+0x3a>
 35a:	5d e2       	ldi	r21, 0x2D	; 45
 35c:	51 93       	st	Z+, r21
 35e:	10 82       	st	Z, r1
 360:	c9 01       	movw	r24, r18
 362:	0c 94 b3 01 	jmp	0x366	; 0x366 <strrev>

00000366 <strrev>:
 366:	dc 01       	movw	r26, r24
 368:	fc 01       	movw	r30, r24
 36a:	67 2f       	mov	r22, r23
 36c:	71 91       	ld	r23, Z+
 36e:	77 23       	and	r23, r23
 370:	e1 f7       	brne	.-8      	; 0x36a <strrev+0x4>
 372:	32 97       	sbiw	r30, 0x02	; 2
 374:	04 c0       	rjmp	.+8      	; 0x37e <strrev+0x18>
 376:	7c 91       	ld	r23, X
 378:	6d 93       	st	X+, r22
 37a:	70 83       	st	Z, r23
 37c:	62 91       	ld	r22, -Z
 37e:	ae 17       	cp	r26, r30
 380:	bf 07       	cpc	r27, r31
 382:	c8 f3       	brcs	.-14     	; 0x376 <strrev+0x10>
 384:	08 95       	ret

00000386 <_exit>:
 386:	f8 94       	cli

00000388 <__stop_program>:
 388:	ff cf       	rjmp	.-2      	; 0x388 <__stop_program>
